# # version: '3'
# services:
#   user-service:
#     build: ./backend/user-service
#     ports:
#       - "5001:5000"
#     environment:
#       DATABASE_URL: "mysql+mysqlconnector://root:root@host.docker.internal:8889/user"
#     networks:
#       - app-network
#   vendor-service:
#     build: ./backend/vendor-service
#     ports:
#       - "5002:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/Vendors"
#     networks:
#       - app-network
#     restart: always

#   ordermanagement-service:
#     build: ./backend/ordermanagement-service # Corrected path
#     ports:
#       - "5003:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/ordermanagement"
#     networks:
#       - app-network
#     restart: always

#   queuemanagement-service:
#     build: ./backend/queuemanagement-service
#     ports:
#       - "5004:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/queuemanagement"
#     networks:
#       - app-network
#     restart: always

#   payment-service:
#     build: ./backend/payment-service
#     ports:
#       - "5005:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/payment"
#     networks:
#       - app-network
#     restart: always

#   notification-service:
#     build: ./backend/notification-service
#     ports:
#       - "5006:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/notification"
#     networks:
#       - app-network
#     restart: always

#   error-service:
#     build: ./backend/error-service
#     ports:
#       - "5007:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/error"
#     networks:
#       - app-network
#     restart: always

#   activitylog-service:
#     build: ./backend/activitylog-service
#     ports:
#       - "5008:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/activitylog"
#     networks:
#       - app-network
#     restart: always

#   splitpayment-service:
#     build: ./backend/splitpayment-service
#     ports:
#       - "5009:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/splitpayment"
#     networks:
#       - app-network
#     restart: always

#   quickreorder-service:
#     build: ./backend/quickreorder-service
#     ports:
#       - "5010:5000"
#     environment:
#       SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/quickreorder"
#     networks:
#       - app-network
#     restart: always

#   frontend:
#     build: ./frontend
#     ports:
#       - "8080:80" # Vue will be available at http://localhost:8080
#     depends_on:
#       - user-service
#     restart: always
#     networks:
#       - app-network
# networks:
#   app-network:

# version: '3'
services:

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # RabbitMQ Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    restart: always
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build: ./backend/user-service
    ports:
      - "5001:5000"
    environment:
      DATABASE_URL: "mysql+mysqlconnector://root:root@host.docker.internal:8889/user"
    networks:
      - app-network
  vendor-service:
    build: ./backend/vendor-service
    ports:
      - "5002:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/Vendors"
    networks:
      - app-network
    restart: always

  ordermanagement-service:
    build: ./backend/ordermanagement-service # Corrected path
    ports:
      - "5003:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/ordermanagement"
    networks:
      - app-network
    restart: always

  queuemanagement-service:
    build: ./backend/queuemanagement-service
    ports:
      - "5004:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/queuemanagement"
    networks:
      - app-network
    restart: always

  payment-service:
    build: ./backend/payment-service
    ports:
      - "5005:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/payment"
    networks:
      - app-network
    restart: always

  notification-service:
    build: ./backend/notification-service
    ports:
      - "5006:5000"
    volumes:
      - ./backend/rabbitmq:/app/rabbitmq
    command:
      [
        "sh",
        "-c",
        "python /app/rabbitmq/amqp_setup.py && python notification.py"
      ]
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/notification"
    networks:
      - app-network
    depends_on:
      placeanorder-service:
        condition: service_started
    restart: always

  error-service:
    build: ./backend/error-service
    ports:
      - "5007:5000"
    volumes:
      - ./backend/rabbitmq:/app/rabbitmq
    command:
      [
        "sh",
        "-c",
        "python /app/rabbitmq/amqp_setup.py && python error.py"
      ]
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/error"
    networks:
      - app-network
    depends_on:
      placeanorder-service:
        condition: service_started
    restart: always

  activitylog-service:
    build: ./backend/activitylog-service
    ports:
      - "5008:5000"
    volumes:
      - ./backend/rabbitmq:/app/rabbitmq
    command:
      [
        "sh",
        "-c",
        "python /app/rabbitmq/amqp_setup.py && python activitylog.py"
      ]
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/activitylog"
    networks:
      - app-network
    depends_on:
      placeanorder-service:
        condition: service_started
    restart: always

  splitpayment-service:
    build: ./backend/splitpayment-service
    ports:
      - "5009:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/splitpayment"
    networks:
      - app-network
    restart: always

  quickreorder-service:
    build: ./backend/quickreorder-service
    ports:
      - "5010:5000"
    environment:
      SQLALCHEMY_DATABASE_URI: "mysql+mysqlconnector://root:root@host.docker.internal:8889/quickreorder"
    networks:
      - app-network
    restart: always

  placeanorder-service:
    build: ./backend/placeanorder-service
    ports:
      - "5011:5000"
    volumes:
      - ./backend/rabbitmq:/app/rabbitmq
    command:
      [
        "sh",
        "-c",
        "python /app/rabbitmq/amqp_setup.py && python placeanorder.py"
      ]
    environment:
      ORDER_MANAGEMENT_URL: "http://ordermanagement-service:5003/orders"
      AMQP_BROKER_URL: "amqp://guest:guest@rabbitmq:5672/"
    depends_on:
      rabbitmq:
        condition: service_healthy
      ordermanagement-service:
        condition: service_started
    networks:
      - app-network
    restart: always

  frontend:
    build: ./frontend
    ports:
      - "8080:80" # Vue will be available at http://localhost:8080
    depends_on:
      - user-service
    restart: always
    networks:
      - app-network
networks:
  app-network:
